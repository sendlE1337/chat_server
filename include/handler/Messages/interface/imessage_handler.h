/**
 * @file imessage_handler.h
 * @brief Базовый интерфейс для обработчиков сообщений (паттерн Chain of Responsibility)
 * @defgroup Handlers Группа обработчиков сообщений
 */
#pragma once
#include "./net/socket.h"
#include <memory>

/**
 * @class IMessageHandler
 * @brief Абстрактный базовый класс для обработки сетевых сообщений
 *
 * @details Реализует паттерн "Цепочка обязанностей" (Chain of Responsibility),
 * позволяя создавать гибкие цепочки обработки входящих сообщений.
 *
 * @note Все реализации должны гарантировать потокобезопасность
 * @see BroadcastHandler - пример реализации
 * @see ChainedHandler - компоновщик обработчиков
 */
class IMessageHandler
{
public:
  /**
   * @brief Обработать входящее сообщение
   * @param sender Умный указатель на сокет-отправитель
   * @param msg Текст полученного сообщения
   * @return true - если сообщение было обработано,
   *         false - если обработчик не смог обработать сообщение
   *
   * @details Метод должен:
   * - Быть реализован в производных классах
   * - Обрабатывать сообщение или передавать его следующему обработчику
   * - Гарантировать безопасность при вызове из разных потоков
   *
   * @throws Может генерировать исключения при критических ошибках
   * @threadsafe Должен быть безопасен для вызова из разных потоков
   */
  virtual bool handle(std::shared_ptr<Socket> sender, const std::string &msg) = 0;

  /**
   * @brief Виртуальный деструктор
   * @note Обеспечивает корректное удаление производных классов
   * через указатель на базовый класс
   */
  virtual ~IMessageHandler() = default;
};
